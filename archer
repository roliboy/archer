#!/bin/bash

detect_boot_mode() {
    [ -d /sys/firmware/efi/efivars ] && echo UEFI || echo BIOS
}

detect_cpu_vendor() {
    [ -n "$(grep GenuineIntel /proc/cpuinfo)" ] && echo intel
    [ -n "$(grep AuthenticAMD /proc/cpuinfo)" ] && echo amd
}

detect_gpu_configuration() {
    [ -n "$(lspci | grep VGA | grep -i intel)" ] && local vga_controller=intel
    [ -n "$(lspci | grep VGA | grep -i amd)" ] && local vga_controller=amd
    [ -n "$(lspci | grep 3D | grep -i intel)" ] && local gfx_accelerator=intel
    [ -n "$(lspci | grep 3D | grep -i amd)" ] && local gfx_accelerator=amd
    [ -n "$(lspci | grep 3D | grep -i nvidia)" ] && local gfx_accelerator=nvidia

    [ "$vga_controller" = intel ] && local configuration=intel
    #TODO: test on different systems
    [ "$vga_controller" = intel ] && [ "$gfx_accelerator" = nvidia ] && local configuration=optimus

    echo "$configuration"
}

detect_wireless() {
    [ -n "$(lspci | grep -i network | grep -i 'wireless\|WLAN\|wifi\|802.11')" ] && echo yes || echo no
}

detect_battery() {
    [ -n "$(grep -i battery /sys/class/power_supply/*/type)" ] && echo yes || echo no
}

detect_touchpad() {
    [ -n "$(grep -i touchpad /proc/bus/input/devices)" ] && echo yes || echo no
}

detect_ssd() {
    [ -n "$(grep 0 /sys/block/*/queue/rotational)" ] && echo yes || echo no
}



get_drive() {
    dialog --title 'Target drive' \
        --menu 'Select drive:' \
        --output-fd 1 \
        0 0 0 \
        $(
            lsblk -lno NAME,SIZE,TYPE |
            grep disk |
            awk '{ print "/dev/"$1, $2 }' |
            sort -u
        )
}

get_mirrorlist_country() {
    dialog --title 'Mirrorlist' \
        --menu 'Select country: ' \
        --output-fd 1 \
        0 0 0 \
        $(
            curl -s https://www.archlinux.org/mirrorlist/ |
            grep '<option value=".*">.*</option>' |
            awk -F'[<">]' '{ gsub(" ", "-", $5); print $3, $5 }'
        )
}

get_timezone() {
    dialog --title 'Timezone' \
        --menu 'Select timezone: ' \
        --output-fd 1 \
        0 0 0 \
        $(
            for zone in $(ls -F /usr/share/zoneinfo | grep \/$); do
                for region in $(ls /usr/share/zoneinfo/$zone); do
                    echo $zone$region '-';
                done;
            done;
        )
}

get_hostname() {
    dialog --title 'Hostname' --inputbox "Enter hostname: " --output-fd 1 0 0
}

get_username() {
    dialog --title 'Username' --inputbox "Enter username: " --output-fd 1 0 0
}

get_password() {
    dialog --title 'Password' --insecure --passwordbox "Enter password: " --output-fd 1 0 0
}



enable_ntp() {
    timedatectl set-ntp true
    echo [DEBUG]: network time protocol: =$(timedatectl show | grep '^NTP=' | cut -d'=' -f 2)= >> archer.log
}


create_partitions() {
    for partition in $(parted -s $1 print | awk '/^ / {print $1}' | tac); do
        umount -l ${1}$partition > /dev/null 2>&1
        parted -s $1 rm $partition
        echo [DEBUG]: unmounting and deleting: =${1}$partition= >> archer.log
    done

    parted -s $1 mklabel gpt

    parted -s $1 mkpart ESP fat32 1MiB 513MiB
    parted -s $1 set 1 boot on
    parted -s $1 mkpart primary ext4 513MiB 100%

    mkfs.vfat ${1}1 > /dev/null 2>&1
    mkfs.ext4 ${1}2 > /dev/null 2>&1

    mount ${1}2 /mnt
    mkdir /mnt/boot
    mount ${1}1 /mnt/boot
}


download_mirrorlist() {
    api_endpoint="https://www.archlinux.org/mirrorlist/?"
    api_param_country="country=${1}&"
    api_param_protocol="protocol=http&protocol=https&ip_version=4"
    api_query="${api_endpoint}${api_param_country}${api_param_protocol}"
    wget -qO /etc/pacman.d/mirrorlist "$api_query"

    sed -i '/^#.*Server /s/^#//' /etc/pacman.d/mirrorlist

    cat /etc/pacman.d/mirrorlist | grep Server | awk '{print "[DEBUG]: mirror:", $3}' >> archer.log
}

configure_pacman() {
    sed -i '/Color/s/^#//g' /etc/pacman.conf
    sed -i '/CheckSpace/s/^#//g' /etc/pacman.conf
    sed -i '/VerbosePkgLists/s/^#//g' /etc/pacman.conf
    sed -i '/VerbosePkgLists/a ILoveCandy' /etc/pacman.conf
}



setup() {
    echo [LOG] > archer.log
    boot_mode="$(detect_boot_mode)"
    echo [DEBUG]: boot mode: =$boot_mode= >> archer.log
    cpu_vendor="$(detect_cpu_vendor)"
    echo [DEBUG]: cpu vendor: =$cpu_vendor= >> archer.log
    gpu_configuration="$(detect_gpu_configuration)"
    echo [DEBUG]: gpu configuration: =$gpu_configuration= >> archer.log
    has_wireless="$(detect_wireless)"
    echo [DEBUG]: wireless: =$has_wireless= >> archer.log
    has_battery="$(detect_battery)"
    echo [DEBUG]: battery: =$has_battery= >> archer.log
    has_touchpad="$(detect_touchpad)"
    echo [DEBUG]: touchpad: =$has_touchpad= >> archer.log
    has_ssd="$(detect_ssd)"
    echo [DEBUG]: ssd: =$has_ssd= >> archer.log
    selected_drive="$(get_drive)"
    echo [DEBUG]: selected drve: =$selected_drive= >> archer.log
    mirrorlist_country="$(get_mirrorlist_country)"
    echo [DEBUG]: mirrorlist country: =$mirrorlist_country= >> archer.log
    timezone="$(get_timezone)"
    echo [DEBUG]: timezone: =$timezone= >> archer.log
    hostname="$(get_hostname)"
    echo [DEBUG]: hostname: =$hostname= >> archer.log
    username="$(get_username)"
    echo [DEBUG]: username: =$username= >> archer.log
    password="$(get_password)"
    echo [DEBUG]: password: =$password= >> archer.log

    enable_ntp

    create_partitions "$selected_drive"

    download_mirrorlist "$mirrorlist_country"

    configure_pacman
}

setup
