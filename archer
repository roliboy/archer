#!/bin/bash

detect_boot_mode() {
    [ -d /sys/firmware/efi/efivars ] && echo UEFI || echo BIOS
}

detect_cpu_vendor() {
    [ -n "$(grep GenuineIntel /proc/cpuinfo)" ] && echo intel
    [ -n "$(grep AuthenticAMD /proc/cpuinfo)" ] && echo amd
}

detect_gpu_configuration() {
    [ -n "$(lspci | grep VGA | grep -i intel)" ] && local vga_controller=intel
    [ -n "$(lspci | grep VGA | grep -i amd)" ] && local vga_controller=amd
    [ -n "$(lspci | grep 3D | grep -i intel)" ] && local gfx_accelerator=intel
    [ -n "$(lspci | grep 3D | grep -i amd)" ] && local gfx_accelerator=amd
    [ -n "$(lspci | grep 3D | grep -i nvidia)" ] && local gfx_accelerator=nvidia

    [ "$vga_controller" = intel ] && local configuration=intel
    #TODO: test on different systems
    [ "$vga_controller" = intel ] && [ "$gfx_accelerator" = nvidia ] && local configuration=optimus

    echo "$configuration"
}

detect_battery() {
    [ -n "$(grep -i battery /sys/class/power_supply/*/type)" ] && echo yes || echo no
}

detect_wireless() {
    [ -n "$(lspci | grep -i network | grep -i 'wireless\|WLAN\|wifi\|802.11')" ] && echo yes || echo no
}

detect_touchpad() {
    [ -n "$(grep -i touchpad /proc/bus/input/devices)" ] && echo yes || echo no
}

detect_ssd() {
    [ -n "$(grep 0 /sys/block/*/queue/rotational)" ] && echo yes || echo no
}



get_drive() {
    dialog --title 'Target drive' \
        --menu 'Select drive:' \
        --output-fd 1 \
        0 0 0 \
        $(
            lsblk -lno NAME,SIZE,TYPE |
            grep disk |
            awk '{ print "/dev/"$1, $2 }' |
            sort -u
        )
}

get_mirrorlist_country() {
    dialog --title 'Mirrorlist' \
        --menu 'Select country: ' \
        --output-fd 1 \
        0 0 0 \
        $(
            curl -s https://www.archlinux.org/mirrorlist/ |
            grep '<option value=".*">.*</option>' |
            awk -F'[<">]' '{ gsub(" ", "-", $5); print $3, $5 }'
        )
}

get_locale() {
    dialog --title 'Locale' \
        --menu 'Select locale: ' \
        --output-fd 1 \
        0 0 0 \
        $(
            cat /etc/locale.gen | awk -F'#' '/#\w/ { print $2 }'
        )
}

get_timezone() {
    dialog --title 'Timezone' \
        --menu 'Select timezone: ' \
        --output-fd 1 \
        0 0 0 \
        $(
            for zone in $(ls -F /usr/share/zoneinfo | grep \/$); do
                for region in $(ls /usr/share/zoneinfo/$zone); do
                    echo $zone$region '-';
                done;
            done;
        )
}

get_hostname() {
    dialog --title 'Hostname' --inputbox "Enter hostname: " --output-fd 1 0 0
}

get_username() {
    dialog --title 'Username' --inputbox "Enter username: " --output-fd 1 0 0
}

get_password() {
    dialog --title 'Password' --insecure --passwordbox "Enter password: " --output-fd 1 0 0
}



enable_ntp() {
    timedatectl set-ntp true
    echo [DEBUG]: network time protocol: =$(timedatectl show | grep '^NTP=' | cut -d'=' -f 2)= >> archer.log
}


create_partitions() {
    for partition in $(parted -s $selected_drive print | awk '/^ / {print $1}' | tac); do
        umount -l ${selected_drive}$partition > /dev/null 2>&1
        parted -s $selected_drive rm $partition
        echo [DEBUG]: unmounting and deleting: =${selected_drive}$partition= >> archer.log
    done

    parted -s $selected_drive mklabel gpt

    parted -s $selected_drive mkpart ESP fat32 1MiB 513MiB
    parted -s $selected_drive set 1 boot on
    parted -s $selected_drive mkpart primary ext4 513MiB 100%

    mkfs.vfat ${selected_drive}1 > /dev/null 2>&1
    mkfs.ext4 ${selected_drive}2 > /dev/null 2>&1

    mount ${selected_drive}2 /mnt
    mkdir /mnt/boot
    mount ${selected_drive}1 /mnt/boot
}


download_mirrorlist() {
    api_endpoint="https://www.archlinux.org/mirrorlist/?"
    api_param_country="country=$mirrorlist_country&"
    api_param_protocol="protocol=http&protocol=https&ip_version=4"
    api_query="${api_endpoint}${api_param_country}${api_param_protocol}"
    wget -qO /etc/pacman.d/mirrorlist "$api_query"

    sed -i '/^#.*Server /s/^#//' /etc/pacman.d/mirrorlist

    cat /etc/pacman.d/mirrorlist | awk '/Server/ {print "[DEBUG]: mirror:", "="$3"="}' >> archer.log
}

configure_pacman() {
    sed -i '/Color/s/^#//g' /etc/pacman.conf
    sed -i '/CheckSpace/s/^#//g' /etc/pacman.conf
    sed -i '/VerbosePkgLists/s/^#//g' /etc/pacman.conf
    sed -i '/VerbosePkgLists/a ILoveCandy' /etc/pacman.conf
}

install_pacman_packages() {
    local packages=(
        base
        base-devel
        linux
        linux-firmware
        $([ "$cpu_vendor" = intel ] && echo intel-ucode)
        $([ "$cpu_vendor" = amd ] && echo amd-ucode)
        networkmanager

        $([ "$gpu_configuration" = nvidia ] && echo nvidia)

        #TODO: change bumblebee to xrun for optimus support
        $([ "$gpu_configuration" = optimus ] && echo nvidia)
        $([ "$gpu_configuration" = optimus ] && echo mesa)
        $([ "$gpu_configuration" = optimus ] && echo bumblebee)
        $([ "$gpu_configuration" = optimus ] && echo bbswitch)

        #TODO: advanced tlp config
        $([ "$has_battery" = yes ] && echo tlp)
        $([ "$has_battery" = yes ] && [ "$has_wireless" = yes ] && echo tlp-rdw)

        #TODO: condition for acpilight
        acpilight

        xorg-server
        xorg-xinit
        xorg-apps
        picom
    )

    for package in ${packages[@]}; do echo [DEBUG]: package: =$package= >> archer.log; done

    pacstrap /mnt ${packages[@]}
}

install_aur_packages() {
    local packages=(
        brave-bin
        xcursor-breeze
        nerd-fonts-hack
    )

    for package in ${packages[@]}; do echo [DEBUG]: AUR package: =$package= >> archer.log; done

    for package in ${packages[@]}; do
        wget -P /mnt/home/$username https://aur.archlinux.org/cgit/aur.git/snapshot/$package.tar.gz
        arch-chroot /mnt /bin/bash <<< "cd /home/$username && \
            sudo -u $username tar xfvz $package.tar.gz && \
            cd $package && \
            sudo -u $username makepkg -risc --noconfirm"
        rm /mnt/home/$username/$package.tar.gz
        rm -rf /mnt/home/$username/$package
    done
}

generate_fstab() {
    genfstab -U /mnt >> /mnt/etc/fstab
    sed -i 's/relatime/noatime/g' /mnt/etc/fstab
}

#TODO: update this
generate_locale() {
    arch-chroot /mnt /bin/bash <<< "sed -i '/^#en_US\.UTF-8/s/^#//' /etc/locale.gen && \
        locale-gen > /dev/null 2>&1 && \
        echo 'LANG=en_US.UTF-8' > /etc/locale.conf"
}

set_timezone() {
    arch-chroot /mnt /bin/bash <<< "ln -sf /usr/share/zoneinfo/$timezone /etc/localtime && \
        hwclock --systohc"
}



setup() {
    echo [LOG] > archer.log
    boot_mode="$(detect_boot_mode)"
    echo [DEBUG]: boot mode: =$boot_mode= >> archer.log
    cpu_vendor="$(detect_cpu_vendor)"
    echo [DEBUG]: cpu vendor: =$cpu_vendor= >> archer.log
    gpu_configuration="$(detect_gpu_configuration)"
    echo [DEBUG]: gpu configuration: =$gpu_configuration= >> archer.log
    has_battery="$(detect_battery)"
    echo [DEBUG]: battery: =$has_battery= >> archer.log
    has_wireless="$(detect_wireless)"
    echo [DEBUG]: wireless: =$has_wireless= >> archer.log
    has_touchpad="$(detect_touchpad)"
    echo [DEBUG]: touchpad: =$has_touchpad= >> archer.log
    has_ssd="$(detect_ssd)"
    echo [DEBUG]: ssd: =$has_ssd= >> archer.log
    selected_drive="$(get_drive)"
    echo [DEBUG]: selected drve: =$selected_drive= >> archer.log
    mirrorlist_country="$(get_mirrorlist_country)"
    echo [DEBUG]: mirrorlist country: =$mirrorlist_country= >> archer.log
    locale="$(get_locale)"
    echo [DEBUG]: locale: =$locale= >> archer.log
    timezone="$(get_timezone)"
    echo [DEBUG]: timezone: =$timezone= >> archer.log
    hostname="$(get_hostname)"
    echo [DEBUG]: hostname: =$hostname= >> archer.log
    username="$(get_username)"
    echo [DEBUG]: username: =$username= >> archer.log
    password="$(get_password)"
    echo [DEBUG]: password: =$password= >> archer.log
    enable_ntp

    create_partitions

    download_mirrorlist

    configure_pacman

    install_pacman_packages

    install_aur_packages

    generate_fstab

    generate_locale

    set_timezone
}

setup
