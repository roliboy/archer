#!/bin/bash

set_terminal_colors() {
    setterm -blank 0 -powersave off
    echo -ne "\e]P02e3436" #black
    echo -ne "\e]P8555753" #darkgrey
    echo -ne "\e]P1cc0000" #darkred
    echo -ne "\e]P9ef2929" #red
    echo -ne "\e]P24e9a06" #darkgreen
    echo -ne "\e]PA8ae234" #green
    echo -ne "\e]P3c4a000" #brown
    echo -ne "\e]PBfce94f" #yellow
    echo -ne "\e]P43465a4" #darkblue
    echo -ne "\e]PC729fcf" #blue
    echo -ne "\e]P575507b" #darkmagenta
    echo -ne "\e]PDad7fa8" #magenta
    echo -ne "\e]P606989a" #darkcyan
    echo -ne "\e]PE34e2e2" #cyan
    echo -ne "\e]P7d3d7cf" #lightgrey
    echo -ne "\e]PFeeeeec" #white
    clear
}

# TODO: update this
# possible values: black red green brown blue magenta cyan lightgray gray brightred brightgreen yellow brightblue brightmagenta brightcyan white
set_newt_colors() {
    export NEWT_COLORS='
        root=,black
        border=cyan,black
        window=,black
        shadow=,black
        title=cyan,black
        button=black,cyan
        actbutton=red,green
        checkbox=red,green
        actcheckbox=red,green
        entry=cyan,black
        label=red,green
        listbox=cyan,black
        actlistbox=black,cyan
        textbox=cyan,black
        acttextbox=red,green
        helpline=red,green
        roottext=red,green
        emptyscale=,black
        fullscale=,cyan
        disentry=red,green
        compactbutton=cyan,black
        actsellistbox=black,cyan
        sellistbox=red,green
    '
}


detect_boot_mode() {
    [ -d /sys/firmware/efi/efivars ] && echo UEFI || echo BIOS
}

detect_cpu_vendor() {
    [ -n "$(grep GenuineIntel /proc/cpuinfo)" ] && echo intel
    [ -n "$(grep AuthenticAMD /proc/cpuinfo)" ] && echo amd
}

detect_gpu_configuration() {
    [ -n "$(lspci | grep VGA | grep -i intel)" ] && local vga_controller=intel
    [ -n "$(lspci | grep VGA | grep -i amd)" ] && local vga_controller=amd
    [ -n "$(lspci | grep 3D | grep -i intel)" ] && local gfx_accelerator=intel
    [ -n "$(lspci | grep 3D | grep -i amd)" ] && local gfx_accelerator=amd
    [ -n "$(lspci | grep 3D | grep -i nvidia)" ] && local gfx_accelerator=nvidia

    [ "$vga_controller" = intel ] && local configuration=intel
    [ "$vga_controller" = nvidia ] && local configuration=nvidia
    [ "$vga_controller" = intel ] && [ "$gfx_accelerator" = nvidia ] && local configuration=optimus

    echo "$configuration"
}

detect_battery() {
    [ -n "$(grep -i battery /sys/class/power_supply/*/type)" ] && echo yes || echo no
}

detect_wireless() {
    [ -n "$(lspci | grep -i network | grep -i 'wireless\|WLAN\|wifi\|802.11')" ] && echo yes || echo no
}

# experimental
detect_bluetooth() {
    [ -n "$(lsusb | grep -i bluetooth)" ] && echo yes && return
    [ -n "$(dmesg | grep -i bluetooth)" ] && echo yes || echo no
}

detect_ssd() {
    [ -n "$(grep 0 /sys/block/*/queue/rotational)" ] && echo yes || echo no
}



get_drive() {
    whiptail --title 'Target drive' \
        --menu 'Select drive:' \
        0 0 0 \
        $(
            lsblk -lno NAME,SIZE,TYPE |
            awk '/disk/ { print "/dev/"$1, $2 }'
        ) \
        3>&1 1>&2 2>&3
}

get_mirrorlist_country() {
    whiptail --title 'Mirrorlist' \
        --menu 'Select country: ' \
        0 0 0 \
        $(
            curl -s https://www.archlinux.org/mirrorlist/ |
            awk -F'[<">]' '/<option value=".*">.*<\/option>/ { gsub(" ", "-", $5); print $3, $5 }'
        ) \
        3>&1 1>&2 2>&3
}

get_locale() {
    whiptail --title 'Locale' \
        --menu 'Select locale: ' \
        0 0 0 \
        en_US.UTF-8 UTF-8 \
        $(
            awk -F'#' '/#\w/ { print $2 }' /etc/locale.gen
        ) \
        3>&1 1>&2 2>&3
}

get_timezone() {
    whiptail --title 'Timezone' \
        --menu 'Select timezone: ' \
        0 0 0 \
        $(
            for zone in $(ls -F /usr/share/zoneinfo | grep \/$); do
                for region in $(ls /usr/share/zoneinfo/$zone); do
                    echo $zone$region '-'
                done
            done
        ) \
        3>&1 1>&2 2>&3
}

get_hostname() {
    whiptail --title 'Hostname' --inputbox "Enter hostname: " 0 0 3>&1 1>&2 2>&3
}

get_username() {
    whiptail --title 'Username' --inputbox "Enter username: " 0 0 3>&1 1>&2 2>&3
}

get_password() {
    whiptail --title 'Password' --passwordbox "Enter password: " 0 0 3>&1 1>&2 2>&3
}

get_desktop_environment() {
    whiptail --title 'DE/WM' --radiolist 'Select desktop environment / window manager' 0 $(expr $(tput cols) \* 3 / 4) 0 \
        'bspwm' 'Tiling window manager that represents windows as the leaves of a full binary tree' OFF \
        'Budgie' 'Desktop environment designed with the modern user in mind, that focuses on simplicity and elegance' OFF \
        'Cinnamon' 'Combines a traditional desktop layout with modern graphical effects' OFF \
        'Deepin' 'Intuitive and elegant design providing an easy to use and reliable system for global users' OFF \
        'dwm' 'extremely lightweight and fast tiling WM, optimizing the environment for the task being performed' OFF \
        'GNOME' 'Attractive, intuitive and extensible desktop with a modern look' OFF \
        'i3' 'Tiling window manager primarily targeted at developers and advanced users' OFF \
        'KDE Plasma' 'Modern and polished, highly customizable and extremely lightweight' ON \
        'LXDE' 'Lightweight, fast and energy-saving desktop environment with a modern interface' OFF \
        'LXQt' 'Modular, blazing-fast and user-friendly desktop environment' OFF \
        'MATE' 'Intuitive and attractive, preserving a traditional desktop experience' OFF \
        'Xfce' 'Lightweight and modular desktop environment ' OFF \
        'None' 'Don'\''t install a desktop environment / window manager'  OFF \
        3>&1 1>&2 2>&3
}

get_optional_features() {
    whiptail --title 'Optional features' --checklist 'Select optional features' --separate-output 0 $(expr $(tput cols) \* 3 / 4) 0 \
        'Autologin' 'Get automatically logged in on boot' ON \
        'Archstrike repository' 'Enable Archstrike repository (pentesting tools)' ON \
        3>&1 1>&2 2>&3
}


create_partitions() {
    for partition in $(parted -s $selected_drive print | awk '/^ / {print $1}' | tac); do
        umount -l ${selected_drive}$partition > /dev/null 2>&1
        parted -s $selected_drive rm $partition

        echo "[DEBUG]: unmounting and deleting: ->${selected_drive}$partition<-" >> archer.log
    done

    parted -s $selected_drive mklabel gpt

    parted -s $selected_drive mkpart ESP fat32 1MiB 513MiB
    parted -s $selected_drive set 1 boot on
    parted -s $selected_drive mkpart primary ext4 513MiB 100%

    mkfs.vfat ${selected_drive}1 > /dev/null 2>&1
    mkfs.ext4 ${selected_drive}2 > /dev/null 2>&1

    mount ${selected_drive}2 /mnt
    mkdir /mnt/boot
    mount ${selected_drive}1 /mnt/boot


    echo "[DEBUG] boot partition created and mounted: ->$([ -n "$(findmnt -o TARGET,FSTYPE ${selected_drive}1 | grep /boot | grep vfat)" ] && echo yes || echo no)<-" >> archer.log
    echo "[DEBUG] root partition created and mounted: ->$([ -n "$(findmnt -o TARGET,FSTYPE ${selected_drive}2 | grep / | grep ext4)" ] && echo yes || echo no)<-" >> archer.log
}

enable_ntp() {
    timedatectl set-ntp true

    echo "[DEBUG]: network time protocol: ->$(timedatectl show | grep '^NTP=' | cut -d'=' -f 2)<-" >> archer.log
}

# TODO: rank mirrors
download_mirrorlist() {
    api_endpoint="https://www.archlinux.org/mirrorlist/?"
    api_param_country="country=$mirrorlist_country&"
    api_param_protocol="protocol=http&protocol=https&ip_version=4"
    api_query="${api_endpoint}${api_param_country}${api_param_protocol}"
    curl -so /etc/pacman.d/mirrorlist "$api_query"
    sed -i '/^#.*Server /s/^#//' /etc/pacman.d/mirrorlist

    awk '/Server/ {print "[DEBUG]: mirror:", "->"$3"<-"}' /etc/pacman.d/mirrorlist >> archer.log
}

install_pacman_packages() {
    local packages=(
        base
        #replace?
        base-devel
        linux
        linux-firmware
        $([ "$cpu_vendor" = intel ] && echo intel-ucode)
        $([ "$cpu_vendor" = amd ] && echo amd-ucode)

        networkmanager #dependency of plasma

        $([ "$gpu_configuration" = nvidia ] && echo nvidia)

        $([ "$gpu_configuration" = optimus ] && echo nvidia)
        $([ "$gpu_configuration" = optimus ] && echo bumblebee)
        $([ "$gpu_configuration" = optimus ] && echo bbswitch)
#         primus for backend?

        $([ "$has_battery" = yes ] && echo tlp)
        $([ "$has_battery" = yes ] && [ "$has_wireless" = yes ] && echo tlp-rdw)

# TODO: bluetooth
#         bluetooth
#         pulseaudio-bluez
# TODO: provide multiple desktop environments
        plasma
        konsole
        dolphin
    )

    for package in ${packages[@]}; do echo "[DEBUG]: package: ->$package<-" >> archer.log; done

    # TODO: improve post-transaction hooks feedback
    pacstrap /mnt ${packages[@]} | awk '
        /^:: Synchronizing package databases\.\.\.$/ {
            print "XXX\n0\nSynchronizing package databases\nXXX"
        }
        /^Packages \([0-9]*\)/ {
            total=substr($2, 2, length($2) - 2)
        }
        /^downloading .*\.pkg\.tar.*\.\.\.$/ {
            dlindex++;
            print "XXX\n"int(dlindex*100/total)"\nDownloading "substr($2, 1, match($2, /\.pkg\.tar.*/) - 1)"\nXXX"
        }
        /^checking .*\.\.\.$/ {
            print "XXX\n0\n"substr($0, 1, length($0) - 3)"\nXXX"
        }
        /^installing .*\.\.\.$/ {
            insindex++;
            print "XXX\n"int(insindex*100/total)"\nInstalling "substr($2, 1, length($2) - 3)"\nXXX"
        }
        /^:: Running post-transaction hooks\.\.\.$/ {
            print "XXX\n0\nRunning post-transaction hooks\nXXX"
        }
        {
            fflush(stdout)
        }
    '
}

enable_archstrike_repository() {
    echo '[archstrike]' >> /mnt/etc/pacman.conf
    echo 'Server = https://mirror.archstrike.org/$arch/$repo' >> /mnt/etc/pacman.conf

    arch-chroot /mnt /bin/bash <<< "pacman -Syy && \
        pacman-key --init && \
        curl -sO https://archstrike.org/keyfile.asc && \
        pacman-key --add keyfile.asc && \
        rm keyfile.asc && \
        pacman-key --lsign-key 9D5F1C051D146843CDA4858BDE64825E7CBC0D51 && \
        pacman -S archstrike-keyring && \
        pacman -S archstrike-mirrorlist && \
        sed -i '/mirror\.archstrike\.org/c\Include = /etc/pacman.d/archstrike-mirrorlist' /mnt/etc/pacman.conf && \
        pacman -Syy"
}

install_aur_packages() {
    local packages=(
        nerd-fonts-fira-code
    )

    for package in ${packages[@]}; do echo "[DEBUG]: AUR package: ->$package<-" >> archer.log; done

    sed -i '/^root.*/a nobody ALL=(ALL) NOPASSWD: ALL' /mnt/etc/sudoers

    for package in ${packages[@]}; do
        arch-chroot /mnt /bin/bash <<< "cd /tmp && \
            curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/$package.tar.gz
            sudo -u nobody tar xfvz $package.tar.gz && \
            cd $package && \
            sudo -u nobody makepkg -risc --noconfirm && \
            cd /tmp && \
            rm $package.tar.gz && \
            rm -rf $package"
    done

    sed -i '/^nobody.*/d' /mnt/etc/sudoers

    echo "[DEBUG]: aur packages installed: ->$(arch-chroot /mnt /bin/bash <<< 'pacman -Qm | wc -l')<-" >> archer.log
}

generate_fstab() {
    genfstab -U /mnt >> /mnt/etc/fstab
    sed -i 's/relatime/noatime/g' /mnt/etc/fstab

    echo "[DEBUG]: fstab generated: ->$([ -n "$(grep noatime /mnt/etc/fstab)" ] && echo yes || echo no)<-" >> archer.log
}

generate_locale() {
    arch-chroot /mnt /bin/bash <<< "sed -i '/^#$locale/s/^#//' /etc/locale.gen && \
        locale-gen > /dev/null 2>&1 && \
        echo 'LANG=$locale' > /etc/locale.conf"

    echo "[DEBUG]: locale generated: ->$([ -n "$(grep $locale /mnt/etc/locale.conf)" ] && echo yes || echo no)<-" >> archer.log
}

install_bootloader() {
    arch-chroot /mnt /bin/bash <<< "bootctl --path=/boot install > /dev/null 2>&1"
    echo 'default arch-*' > /mnt/boot/loader/loader.conf
    echo 'title  Arch Linux' > /mnt/boot/loader/entries/arch.conf
    echo 'linux  /vmlinuz-linux' >> /mnt/boot/loader/entries/arch.conf

    [ "$cpu_vendor" = intel ] && \
        echo 'initrd /intel-ucode.img' >> /mnt/boot/loader/entries/arch.conf
    [ "$cpu_vendor" = amd ] && \
        echo 'initrd /amd-ucode.img' >> /mnt/boot/loader/entries/arch.conf

    echo 'initrd /initramfs-linux.img' >> /mnt/boot/loader/entries/arch.conf

    local root_uuid=$(blkid | \
        grep ${selected_drive}2 | \
        awk '{print $2}' | \
        cut -d'"' -f 2)

    echo "options root=UUID=$root_uuid rw" >> /mnt/boot/loader/entries/arch.conf

    echo "[DEBUG]: bootloader installed: ->$([ -n "$(grep UUID /mnt/boot/loader/entries/arch.conf)" ] && echo yes || echo no)<-" >> archer.log
}

set_timezone() {
    arch-chroot /mnt /bin/bash <<< "timedatectl set-ntp true && \
        ln -sf /usr/share/zoneinfo/$timezone /etc/localtime && \
        hwclock --systohc"

    echo "[DEBUG]: timezone configured: ->$([ -n "$(ls -la /mnt/etc/localtime | grep $timezone)" ] && echo yes || echo no)<-" >> archer.log
}

configure_network() {
    echo $hostname > /mnt/etc/hostname
    echo "127.0.0.1  localhost" >> /mnt/etc/hosts
    echo "::1        localhost" >> /mnt/etc/hosts
    echo "127.0.1.1  $hostname.localdomain $hostname" >> /mnt/etc/hosts

    echo "[DEBUG]: network configured: ->$([ -n "$(grep $hostname /mnt/etc/hosts)" ] && echo yes || echo no)<-" >> archer.log
}

configure_pacman() {
    sed -i '/Color/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/CheckSpace/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/VerbosePkgLists/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/VerbosePkgLists/a ILoveCandy' /mnt/etc/pacman.conf

    echo "[DEBUG]: pacman configured: ->$([ -n "$(grep ILoveCandy /mnt/etc/pacman.conf)" ] && echo yes || echo no)<-" >> archer.log
}

#TODO: modify master file
configure_tlp() {
    [ "$gpu_configuration" = optimus ] && \
        echo 'RUNTIME_PM_DRIVER_BLACKLIST="nouveau nvidia"' > /mnt/etc/tlp.d/10-driver-blacklist.conf
    # TODO: update this after tlp config will be migrated to main file
    echo "[DEBUG]: tlp configured: ->$([ -n "$(grep nvidia /mnt/etc/tlp.d/10-driver-blacklist.conf)" ] && echo yes || echo no)<-" >> archer.log
}

configure_journald() {
    sed -i 's/#SystemMaxUse.*/SystemMaxUse=50M/g' /mnt/etc/systemd/journald.conf

    echo "[DEBUG]: journald configured: ->$([ -n "$(grep '^SystemMaxUse' /mnt/etc/systemd/journald.conf)" ] && echo yes || echo no)<-" >> archer.log
}

configure_coredump() {
    sed -i 's/#Storage.*/Storage=none/g' /mnt/etc/systemd/coredump.conf

    echo "[DEBUG]: coredump configured: ->$([ -n "$(grep '^Storage' /mnt/etc/systemd/coredump.conf)" ] && echo yes || echo no)<-" >> archer.log
}

enable_services() {
    arch-chroot /mnt /bin/bash <<< "systemctl enable NetworkManager.service > /dev/null 2>&1"

    [ "$has_battery" = yes ] && arch-chroot /mnt /bin/bash <<< "systemctl enable tlp.service > /dev/null 2>&1"

    [ "$has_battery" = yes ] && [ "$has_wireless" = yes ] && \
        arch-chroot /mnt /bin/bash <<< "systemctl enable NetworkManager-dispatcher.service > /dev/null 2>&1 && \
            systemctl mask systemd-rfkill.service > /dev/null 2>&1 && \
            systemctl mask systemd-rfkill.socket > /dev/null 2>&1"

    [ "$has_ssd" = yes ] && arch-chroot /mnt /bin/bash <<< "systemctl enable fstrim.timer > /dev/null 2>&1"
    [ "$gpu_configuration" = optimus ] && arch-chroot /mnt /bin/bash <<< "systemctl enable bumblebeed.service > /dev/null 2>&1"
#       enable sddm
#       bluetooth
}

set_root_password() {
    arch-chroot /mnt /bin/bash <<< "yes $password | passwd > /dev/null 2>&1"

    echo "[DEBUG]: password set for root: ->$([ -n "$(grep root /mnt/etc/shadow | grep '\$6\$')" ] && echo yes || echo no)<-" >> archer.log
}

# TODO: shell choices
create_user() {
    arch-chroot /mnt /bin/bash <<< "groupadd $username && \
        useradd $username -m -g $username -G wheel && \
        yes $password | passwd $username > /dev/null 2>&1 && \
        chown -R $username:$username /home/$username && \
        usermod --shell /bin/bash $username"


    # TODO: separate function
    sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^# //' /mnt/etc/sudoers
    [ "$gpu_configuration" = optimus ] && \
        arch-chroot /mnt /bin/bash <<< "gpasswd -a $username bumblebee > /dev/null"

    # TODO: check for other properties
    echo "[DEBUG]: user created: ->$([ -n "$(grep $username /mnt/etc/shadow | grep '\$6\$')" ] && echo yes || echo no)<-" >> archer.log
}

enable_autologin() {
    # TODO: handle different display managers
    # TODO: if statements / reduce line size


    [ "$desktop_environment" = 'KDE Plasma' ] && echo -e "[Autologin]\nUser=$username\nSession=plasma.desktop" > /mnt/etc/sddm.conf.d/autologin.conf

    # mkdir /mnt/etc/systemd/getty@tty1.service.d ?
    [ "$desktop_environment" = 'None' ] && echo -e "[Service]\nExecStart=\nExecStart=-/usr/bin/agetty --autologin $username --noclear %I \$TERM" > /mnt/etc/system/systemd/getty@tty1.service.d/override.conf

    # TODO: debug check
}

# TODO: interface size
setup() {
    echo "[LOG]" > archer.log

    set_terminal_colors
    set_newt_colors

    boot_mode="$(detect_boot_mode)"
    echo "[DEBUG]: boot mode: ->$boot_mode<-" >> archer.log

    [ $boot_mode != UEFI ] && echo "[ERROR]: boot mode not supported: ->$boot_mode<-" >> archer.log
    [ $boot_mode != UEFI ] && exit 0

    cpu_vendor="$(detect_cpu_vendor)"
    echo "[DEBUG]: cpu vendor: ->$cpu_vendor<-" >> archer.log
    gpu_configuration="$(detect_gpu_configuration)"
    echo "[DEBUG]: gpu configuration: ->$gpu_configuration<-" >> archer.log
    has_battery="$(detect_battery)"
    echo "[DEBUG]: battery: ->$has_battery<-" >> archer.log
    has_wireless="$(detect_wireless)"
    echo "[DEBUG]: wireless: ->$has_wireless<-" >> archer.log
    has_bluetooth="$(detect_bluetooth)"
    echo "[DEBUG]: bluetooth: ->$has_bluetooth<-" >> archer.log
    has_ssd="$(detect_ssd)"
    echo "[DEBUG]: ssd: ->$has_ssd<-" >> archer.log


    selected_drive="$(get_drive)"
    echo "[DEBUG]: selected drve: ->$selected_drive<-" >> archer.log
    mirrorlist_country="$(get_mirrorlist_country)"
    echo "[DEBUG]: mirrorlist country: ->$mirrorlist_country<-" >> archer.log
    locale="$(get_locale)"
    echo "[DEBUG]: locale: ->$locale<-" >> archer.log
    timezone="$(get_timezone)"
    echo "[DEBUG]: timezone: ->$timezone<-" >> archer.log
    hostname="$(get_hostname)"
    echo "[DEBUG]: hostname: ->$hostname<-" >> archer.log
    username="$(get_username)"
    echo "[DEBUG]: username: ->$username<-" >> archer.log
    password="$(get_password)"
    echo "[DEBUG]: password: ->$password<-" >> archer.log

    desktop_environment="$(get_desktop_environment)"
    echo "[DEBUG]: DE/WM: ->$desktop_environment<-" >> archer.log

    optional_features="$(get_optional_features)"
    # echo $optional_features

    feature_autologin=$([ -n "$(grep 'Autologin' <<< $optional_features)" ] && echo yes || echo no)
    echo "[DEBUG]: Enable autologin: ->$feature_autologin<-" >> archer.log
    feature_archstrike_repository=$([ -n "$(grep 'Archstrike repository' <<< $optional_features)" ] && echo yes || echo no)
    echo "[DEBUG]: Enable Archstrike repository: ->$feature_archstrike_repository<-" >> archer.log


    declare -A description
    description[create_partitions]="Creating partitions on $selected_drive"
    description[enable_ntp]='Enabling NTP'
    description[download_mirrorlist]='Downloading mirrorlist'
    description[install_pacman_packages]='Installing pacman packages'
    description[enable_archstrike_repository]='Enabling archstrike repository'
    description[install_aur_packages]='Installing AUR packages'
    description[generate_fstab]='Generating fstab'
    description[generate_locale]='Generating locale'
    description[install_bootloader]='Installing bootloader'
    description[set_timezone]='Setting timezone'
    description[configure_network]='Configuring network'
    description[configure_pacman]='Configuring pacman'
    description[configure_tlp]='Configuring TLP'
    description[configure_journald]='Configuring journald'
    description[configure_coredump]='Configuring coredump'
    description[set_root_password]='Setting root password'
    description[create_user]="Creating user $username"
    description[enable_autologin]="Enabling autologin for $username"


    local execution_order=(
        create_partitions
        enable_ntp
        download_mirrorlist
        install_pacman_packages
        $([ "$feature_archstrike_repository" = yes ] && echo enable_archstrike_repository)
        install_aur_packages
        generate_fstab
        generate_locale
        install_bootloader
        set_timezone
        configure_network
        configure_pacman
        $([ "$has_battery" = yes ] && echo configure_tlp)
        configure_journald
        configure_coredump
        set_root_password
        create_user
        $([ "$feature_autologin" = yes ] && echo enable_autologin)
    )


    for step in ${!execution_order[@]}; do
        echo -e "XXX\n$(expr $step \* 100 / ${#execution_order[@]})\n${description[${execution_order[$step]}]}\nXXX"
        ${execution_order[$step]}
    done | whiptail --title "Progress" --gauge "Initializing" 0 $(expr $(tput cols) \* 3 / 4) 0

    whiptail --title 'Show log' --yesno "Show installation log?" 0 0 3>&1 1>&2 2>&3

    [ $? = 0 ] && whiptail --title 'archer.log' --textbox archer.log 0 0 3>&1 1>&2 2>&3

}

setup
