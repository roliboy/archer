#!/bin/bash

set_colorscheme() {
    setterm -blank 0 -powersave off
    echo -ne "\e]P02e3436" #black
    echo -ne "\e]P8555753" #darkgrey
    echo -ne "\e]P1cc0000" #darkred
    echo -ne "\e]P9ef2929" #red
    echo -ne "\e]P24e9a06" #darkgreen
    echo -ne "\e]PA8ae234" #green
    echo -ne "\e]P3c4a000" #brown
    echo -ne "\e]PBfce94f" #yellow
    echo -ne "\e]P43465a4" #darkblue
    echo -ne "\e]PC729fcf" #blue
    echo -ne "\e]P575507b" #darkmagenta
    echo -ne "\e]PDad7fa8" #magenta
    echo -ne "\e]P606989a" #darkcyan
    echo -ne "\e]PE34e2e2" #cyan
    echo -ne "\e]P7d3d7cf" #lightgrey
    echo -ne "\e]PFeeeeec" #white
    clear #for background artifacting
}


set_dialogrc() {
    echo 'aspect = 0' > .dialogrc
    echo 'separate_widget = ""' >> .dialogrc
    echo 'tab_len = 0' >> .dialogrc
    echo 'visit_items = off' >> .dialogrc

    echo 'screen_color = (cyan, black, on)' >> .dialogrc
    echo 'dialog_color = (cyan, black, off)' >> .dialogrc
    echo 'title_color = (cyan, black, off)' >> .dialogrc
    echo 'border_color = (cyan, black, off)' >> .dialogrc

    echo 'button_inactive_color = (cyan, black, off)' >> .dialogrc
    echo 'button_key_inactive_color = (cyan, black, off)' >> .dialogrc
    echo 'button_label_inactive_color = (cyan, black, off)' >> .dialogrc

    echo 'button_active_color = (cyan, black, on)' >> .dialogrc
    echo 'button_key_active_color = (cyan, black, on)' >> .dialogrc
    echo 'button_label_active_color = (cyan, black, off)' >> .dialogrc

    echo 'tag_key_selected_color = (white, black, on)' >> .dialogrc
    echo 'item_selected_color = (white, black, on)' >> .dialogrc

    echo 'inputbox_color = (white, black, on)' >> .dialogrc
    echo 'inputbox_border_color = (cyan, black, on)' >> .dialogrc

    echo 'position_indicator_color = (cyan, black, on)' >> .dialogrc

    echo 'menubox_color = (cyan, black, off)' >> .dialogrc
    echo 'menubox_border_color = (cyan, black, off)' >> .dialogrc

    echo 'item_color = (cyan, black, off)' >> .dialogrc
    echo 'tag_color = (cyan, black, off)' >> .dialogrc

    echo 'tag_selected_color = (white, black, on)' >> .dialogrc

    echo 'tag_key_color = (cyan, black, off)' >> .dialogrc

    echo 'uarrow_color = (cyan, black, on)' >> .dialogrc
    echo 'darrow_color = (cyan, black, on)' >> .dialogrc

    echo 'gauge_color = (cyan, black, off)' >> .dialogrc
    echo 'border2_color = (cyan, black, off)' >> .dialogrc
    echo 'menubox_border2_color = (cyan, black, off)' >> .dialogrc

    export DIALOGRC="$(pwd)/.dialogrc"
}


detect_boot_mode() {
    [ -d /sys/firmware/efi/efivars ] && echo UEFI || echo BIOS
}

detect_cpu_vendor() {
    [ -n "$(grep GenuineIntel /proc/cpuinfo)" ] && echo intel
    [ -n "$(grep AuthenticAMD /proc/cpuinfo)" ] && echo amd
}

detect_gpu_configuration() {
    [ -n "$(lspci | grep VGA | grep -i intel)" ] && local vga_controller=intel
    [ -n "$(lspci | grep VGA | grep -i amd)" ] && local vga_controller=amd
    [ -n "$(lspci | grep 3D | grep -i intel)" ] && local gfx_accelerator=intel
    [ -n "$(lspci | grep 3D | grep -i amd)" ] && local gfx_accelerator=amd
    [ -n "$(lspci | grep 3D | grep -i nvidia)" ] && local gfx_accelerator=nvidia

    [ "$vga_controller" = intel ] && local configuration=intel
    [ "$vga_controller" = nvidia ] && local configuration=nvidia
    [ "$vga_controller" = intel ] && [ "$gfx_accelerator" = nvidia ] && local configuration=optimus

    echo "$configuration"
}

detect_battery() {
    [ -n "$(grep -i battery /sys/class/power_supply/*/type)" ] && echo yes || echo no
}

detect_wireless() {
    [ -n "$(lspci | grep -i network | grep -i 'wireless\|WLAN\|wifi\|802.11')" ] && echo yes || echo no
}

detect_touchpad() {
    [ -n "$(grep -i touchpad /proc/bus/input/devices)" ] && echo yes || echo no
}

detect_ssd() {
    [ -n "$(grep 0 /sys/block/*/queue/rotational)" ] && echo yes || echo no
}



get_drive() {
    dialog --title 'Target drive' \
        --menu 'Select drive:' \
        --output-fd 1 \
        0 0 0 \
        $(
            lsblk -lno NAME,SIZE,TYPE |
            awk '/disk/ { print "/dev/"$1, $2 }'
        )
}

get_mirrorlist_country() {
    dialog --title 'Mirrorlist' \
        --menu 'Select country: ' \
        --output-fd 1 \
        0 0 0 \
        $(
            curl -s https://www.archlinux.org/mirrorlist/ |
            awk -F'[<">]' '/<option value=".*">.*<\/option>/ { gsub(" ", "-", $5); print $3, $5 }'
        )
}

get_locale() {
    dialog --title 'Locale' \
        --menu 'Select locale: ' \
        --output-fd 1 \
        0 0 0 \
        en_US.UTF-8 UTF-8 \
        $(
            awk -F'#' '/#\w/ { print $2 }' /etc/locale.gen
        )
}

get_keymap() {
    dialog --title 'Keymap' \
        --menu 'Select keymap: ' \
        --output-fd 1 \
        0 0 0 \
        $(
            find /usr/share/kbd/keymaps/ -type f -name "*.map.gz" -printf "%f -\n" |
            sort
        )
}

get_timezone() {
    dialog --title 'Timezone' \
        --menu 'Select timezone: ' \
        --output-fd 1 \
        0 0 0 \
        $(
            for zone in $(ls -F /usr/share/zoneinfo | grep \/$); do
                for region in $(ls /usr/share/zoneinfo/$zone); do
                    echo $zone$region '-';
                done;
            done;
        )
}

get_hostname() {
    dialog --title 'Hostname' --inputbox "Enter hostname: " --output-fd 1 0 0
}

get_username() {
    dialog --title 'Username' --inputbox "Enter username: " --output-fd 1 0 0
}

get_password() {
    dialog --title 'Password' --insecure --passwordbox "Enter password: " --output-fd 1 0 0
}


create_partitions() {
    for partition in $(parted -s $selected_drive print | awk '/^ / {print $1}' | tac); do
        umount -l ${selected_drive}$partition > /dev/null 2>&1
        parted -s $selected_drive rm $partition
        echo [DEBUG]: unmounting and deleting: =${selected_drive}$partition= >> archer.log
    done

    parted -s $selected_drive mklabel gpt

    parted -s $selected_drive mkpart ESP fat32 1MiB 513MiB
    parted -s $selected_drive set 1 boot on
    parted -s $selected_drive mkpart primary ext4 513MiB 100%

    mkfs.vfat ${selected_drive}1 > /dev/null 2>&1
    mkfs.ext4 ${selected_drive}2 > /dev/null 2>&1

    mount ${selected_drive}2 /mnt
    mkdir /mnt/boot
    mount ${selected_drive}1 /mnt/boot
}

enable_ntp() {
    timedatectl set-ntp true
}

download_mirrorlist() {
    api_endpoint="https://www.archlinux.org/mirrorlist/?"
    api_param_country="country=$mirrorlist_country&"
    api_param_protocol="protocol=http&protocol=https&ip_version=4"
    api_query="${api_endpoint}${api_param_country}${api_param_protocol}"
    wget -qO /etc/pacman.d/mirrorlist "$api_query"

    sed -i '/^#.*Server /s/^#//' /etc/pacman.d/mirrorlist
}

install_pacman_packages() {
    local packages=(
        base
        base-devel
        linux
        linux-firmware
        $([ "$cpu_vendor" = intel ] && echo intel-ucode)
        $([ "$cpu_vendor" = amd ] && echo amd-ucode)
        networkmanager

        $([ "$gpu_configuration" = nvidia ] && echo nvidia)

        #TODO: change bumblebee to xrun for optimus support
        $([ "$gpu_configuration" = optimus ] && echo nvidia)
        $([ "$gpu_configuration" = optimus ] && echo mesa)
        $([ "$gpu_configuration" = optimus ] && echo bumblebee)
        $([ "$gpu_configuration" = optimus ] && echo bbswitch)

        #TODO: advanced tlp config
        $([ "$has_battery" = yes ] && echo tlp)
        $([ "$has_battery" = yes ] && [ "$has_wireless" = yes ] && echo tlp-rdw)

        acpi
        #TODO: condition for acpilight
        acpilight

        xorg-server
        xorg-xinit
        xorg-apps
        picom

        alacritty
    	wget
    	htop
        xwallpaper
        qutebrowser
    	alsa-utils
        arc-gtk-theme
    )

    for package in ${packages[@]}; do echo [DEBUG]: package: =$package= >> archer.log; done

    sed -i '/Color/s/^#//g' /etc/pacman.conf
    sed -i '/CheckSpace/s/^#//g' /etc/pacman.conf
    sed -i '/VerbosePkgLists/s/^#//g' /etc/pacman.conf
    sed -i '/VerbosePkgLists/a ILoveCandy' /etc/pacman.conf

    pacstrap /mnt ${packages[@]}
}

install_aur_packages() {
    local packages=(
        nerd-fonts-fira-code
        drive-bin
    )

    for package in ${packages[@]}; do echo [DEBUG]: AUR package: =$package= >> archer.log; done

    sed -i '/^root.*/a nobody ALL=(ALL) NOPASSWD: ALL' /mnt/etc/sudoers

    for package in ${packages[@]}; do
        arch-chroot /mnt /bin/bash <<< "cd /tmp && \
            curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/$package.tar.gz
            sudo -u nobody tar xfvz $package.tar.gz && \
            cd $package && \
            sudo -u nobody makepkg -risc --noconfirm && \
            cd /tmp && \
            rm $package.tar.gz && \
            rm -rf $package"
    done

    sed -i '/^nobody.*/d' /mnt/etc/sudoers
}

generate_fstab() {
    genfstab -U /mnt >> /mnt/etc/fstab
    sed -i 's/relatime/noatime/g' /mnt/etc/fstab
}

generate_locale() {
    arch-chroot /mnt /bin/bash <<< "sed -i '/^#$locale/s/^#//' /etc/locale.gen && \
        locale-gen > /dev/null 2>&1 && \
        echo 'LANG=$locale' > /etc/locale.conf"
}

set_keymap() {
    echo "KEYMAP=$keymap" > /mnt/etc/vconsole.conf
}

install_bootloader() {
  arch-chroot /mnt /bin/bash <<< "bootctl --path=/boot install > /dev/null 2>&1"
  echo 'default arch-*' > /mnt/boot/loader/loader.conf
  echo 'title  Arch Linux' > /mnt/boot/loader/entries/arch.conf
  echo 'linux  /vmlinuz-linux' >> /mnt/boot/loader/entries/arch.conf

  [ "$cpu_vendor" = intel ] && \
    echo 'initrd /intel-ucode.img' >> /mnt/boot/loader/entries/arch.conf
  [ "$cpu_vendor" = amd ] && \
    echo 'initrd /amd-ucode.img' >> /mnt/boot/loader/entries/arch.conf

  echo 'initrd /initramfs-linux.img' >> /mnt/boot/loader/entries/arch.conf

  local root_uuid=$(blkid | \
    grep ${selected_drive}2 | \
    awk '{print $2}' | \
    cut -d'"' -f 2)

  echo "options root=UUID=$root_uuid rw" >> /mnt/boot/loader/entries/arch.conf
}

set_timezone() {
    arch-chroot /mnt /bin/bash <<< "timedatectl set-ntp true && \
        ln -sf /usr/share/zoneinfo/$timezone /etc/localtime && \
        hwclock --systohc"
}

configure_network() {
    echo $hostname > /mnt/etc/hostname
    echo "127.0.0.1  localhost" >> /mnt/etc/hosts
    echo "::1        localhost" >> /mnt/etc/hosts
    echo "127.0.1.1  $hostname.localdomain $hostname" >> /mnt/etc/hosts
}

configure_pacman() {
    sed -i '/Color/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/CheckSpace/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/VerbosePkgLists/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/VerbosePkgLists/a ILoveCandy' /mnt/etc/pacman.conf
}

configure_libinput() {
    mkdir -p /mnt/etc/X11/xorg.conf.d
    echo 'Section "InputClass"' > /mnt/etc/X11/xorg.conf.d/50-touchpad.conf
    echo '  Identifier "tapping and natural scrolling"' >> /mnt/etc/X11/xorg.conf.d/50-touchpad.conf
    echo '  MatchIsTouchpad "on"' >> /mnt/etc/X11/xorg.conf.d/50-touchpad.conf
    echo '  MatchDriver "libinput"' >> /mnt/etc/X11/xorg.conf.d/50-touchpad.conf
    echo '  Option "Tapping" "on"' >> /mnt/etc/X11/xorg.conf.d/50-touchpad.conf
    echo '  Option "NaturalScrolling" "true"' >> /mnt/etc/X11/xorg.conf.d/50-touchpad.conf
    echo 'EndSection' >> /mnt/etc/X11/xorg.conf.d/50-touchpad.conf
}

#TODO: modify master file
configure_tlp() {
    [ "$gpu_configuration" = optimus ] && \
        echo 'RUNTIME_PM_DRIVER_BLACKLIST="nouveau nvidia"' > /mnt/etc/tlp.d/10-driver-blacklist.conf
}

configure_journald() {
    sed -i 's/#SystemMaxUse.*/SystemMaxUse=50M/g' /mnt/etc/systemd/journald.conf
}

configure_coredump() {
    sed -i 's/#Storage.*/Storage=none/g' /mnt/etc/systemd/coredump.conf
}

enable_services() {
    arch-chroot /mnt /bin/bash <<< "systemctl enable NetworkManager.service > /dev/null 2>&1"

    [ "$has_battery" = yes ] && arch-chroot /mnt /bin/bash <<< "systemctl enable tlp.service > /dev/null 2>&1"

    [ "$has_battery" = yes ] && [ "$has_wireless" = yes ] && \
        arch-chroot /mnt /bin/bash <<< "systemctl enable NetworkManager-dispatcher.service > /dev/null 2>&1 && \
            systemctl mask systemd-rfkill.service > /dev/null 2>&1 && \
            systemctl mask systemd-rfkill.socket > /dev/null 2>&1"

    [ "$has_ssd" = yes ] && arch-chroot /mnt /bin/bash <<< "systemctl enable fstrim.timer > /dev/null 2>&1"
    [ "$gpu_configuration" = optimus ] && arch-chroot /mnt /bin/bash <<< "systemctl enable bumblebeed.service > /dev/null 2>&1"
}

set_root_password() {
    arch-chroot /mnt /bin/bash <<< "yes $password | passwd > /dev/null 2>&1"
}

create_user() {
    arch-chroot /mnt /bin/bash <<< "groupadd $username && \
        useradd $username -m -g $username -G wheel,storage,power,network,video,audio,lp,sys,input && \
        yes $password | passwd $username > /dev/null 2>&1 && \
        chown -R $username:$username /home/$username"

    mkdir /mnt/etc/systemd/getty@tty1.service.d

    echo '[Service]' > /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
    echo 'ExecStart=' > /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
    echo "ExecStart=-/usr/bin/agetty --autologin $username --noclear %I \$TERM" > /mnt/etc/system/systemd/getty@tty1.service.d/override.conf

    sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^# //' /mnt/etc/sudoers
    [ "$gpu_configuration" = optimus ] && \
        arch-chroot /mnt /bin/bash <<< "gpasswd -a $username bumblebee > /dev/null"
}

#TODO: progress bar
#TODO: mirror ranking
setup() {
    echo "[LOG]" > archer.log

    set_colorscheme

    set_dialogrc

    boot_mode="$(detect_boot_mode)"
    echo "[DEBUG]: boot mode: =$boot_mode=" >> archer.log

    [ $boot_mode != UEFI ] && echo "[ERROR]: boot mode not supported: =$boot_mode=" >> archer.log
    [ $boot_mode != UEFI ] && exit 0

    cpu_vendor="$(detect_cpu_vendor)"
    echo "[DEBUG]: cpu vendor: =$cpu_vendor=" >> archer.log
    gpu_configuration="$(detect_gpu_configuration)"
    echo "[DEBUG]: gpu configuration: =$gpu_configuration=" >> archer.log
    has_battery="$(detect_battery)"
    echo "[DEBUG]: battery: =$has_battery=" >> archer.log
    has_wireless="$(detect_wireless)"
    echo "[DEBUG]: wireless: =$has_wireless=" >> archer.log
    has_touchpad="$(detect_touchpad)"
    echo "[DEBUG]: touchpad: =$has_touchpad=" >> archer.log
    has_ssd="$(detect_ssd)"
    echo "[DEBUG]: ssd: =$has_ssd=" >> archer.log

    if [ "$preset" = roliboy ]; then
        selected_drive="$(get_drive)"
        echo "[DEBUG]: selected drve: =$selected_drive=" >> archer.log
        mirrorlist_country="RO"
        echo "[DEBUG]: mirrorlist country: =$mirrorlist_country=" >> archer.log
        locale="en_US.UTF-8"
        echo "[DEBUG]: locale: =$locale=" >> archer.log
        keymap="us.map.gz"
        echo "[DEBUG]: keymap: =$keymap=" >> archer.log
        timezone="Europe/Bucharest"
        echo "[DEBUG]: timezone: =$timezone=" >> archer.log
        hostname="arch"
        echo "[DEBUG]: hostname: =$hostname=" >> archer.log
        username="roliboy"
        echo "[DEBUG]: username: =$username=" >> archer.log
        password="$(get_password)"
        echo "[DEBUG]: password: =$password=" >> archer.log
    else
        selected_drive="$(get_drive)"
        echo "[DEBUG]: selected drve: =$selected_drive=" >> archer.log
        mirrorlist_country="$(get_mirrorlist_country)"
        echo "[DEBUG]: mirrorlist country: =$mirrorlist_country=" >> archer.log
        locale="$(get_locale)"
        echo "[DEBUG]: locale: =$locale=" >> archer.log
        keymap="$(get_keymap)"
        echo "[DEBUG]: keymap: =$keymap=" >> archer.log
        timezone="$(get_timezone)"
        echo "[DEBUG]: timezone: =$timezone=" >> archer.log
        hostname="$(get_hostname)"
        echo "[DEBUG]: hostname: =$hostname=" >> archer.log
        username="$(get_username)"
        echo "[DEBUG]: username: =$username=" >> archer.log
        password="$(get_password)"
        echo "[DEBUG]: password: =$password=" >> archer.log
    fi


    create_partitions

    enable_ntp
    echo "[DEBUG]: network time protocol: =$(timedatectl show | grep '^NTP=' | cut -d'=' -f 2)=" >> archer.log

    download_mirrorlist
    awk '/Server/ {print "[DEBUG]: mirror:", "="$3"="}' /etc/pacman.d/mirrorlist >> archer.log

    install_pacman_packages

    install_aur_packages
    echo "[DEBUG]: aur packages installed: =$(arch-chroot /mnt /bin/bash <<< 'pacman -Qm | wc -l')=" >> archer.log

    generate_fstab
    echo "[DEBUG]: fstab generated: =$([ -n "$(grep noatime /mnt/etc/fstab)" ] && echo yes || echo no)=" >> archer.log

    generate_locale
    echo "[DEBUG]: locale generated: =$([ -n "$(grep $locale /mnt/etc/locale.conf)" ] && echo yes || echo no)=" >> archer.log

    set_keymap
    echo "[DEBUG]: keymap set: =$([ -n "$(grep $keymap /mnt/etc/vconsole.conf)" ] && echo yes || echo no)=" >> archer.log

    install_bootloader
    echo "[DEBUG]: bootloader installed: =$([ -n "$(grep UUID /mnt/boot/loader/entries/arch.conf)" ] && echo yes || echo no)=" >> archer.log

    set_timezone
    echo "[DEBUG]: timezone configured: =$([ -n "$(ls -la /mnt/etc/localtime | grep $timezone)" ] && echo yes || echo no)=" >> archer.log

    configure_network
    echo "[DEBUG]: network configured: =$([ -n "$(grep $hostname /mnt/etc/hosts)" ] && echo yes || echo no)=" >> archer.log

    configure_pacman
    echo "[DEBUG]: pacman configured: =$([ -n "$(grep ILoveCandy /mnt/etc/pacman.conf)" ] && echo yes || echo no)=" >> archer.log

    [ "$has_touchpad" = yes ] && configure_libinput
    echo "[DEBUG]: libinput configured: =$([ -n "$(grep InputClass /mnt/etc/X11/xorg.conf.d/50-touchpad.conf)" ] && echo yes || echo no)=" >> archer.log

    [ "$has_battery" = yes ] && configure_tlp
    # TODO: update this after tlp config will be migrated to main file
    echo "[DEBUG]: tlp configured: =$([ -n "$(grep nvidia /mnt/etc/tlp.d/10-driver-blacklist.conf)" ] && echo yes || echo no)=" >> archer.log

    configure_journald
    echo "[DEBUG]: journald configured: =$([ -n "$(grep '^SystemMaxUse' /mnt/etc/systemd/journald.conf)" ] && echo yes || echo no)=" >> archer.log

    configure_coredump
    echo "[DEBUG]: coredump configured: =$([ -n "$(grep '^Storage' /mnt/etc/systemd/coredump.conf)" ] && echo yes || echo no)=" >> archer.log

    enable_services
    #systemctl status

    set_root_password
    #sudo check

    create_user
    echo "[DEBUG]: user created: =$([ -n "$(grep $username <<< `arch-chroot /mnt /bin/bash <<< 'cut -d: -f1 /etc/passwd'`)" ] && echo yes || echo no)=" >> archer.log
}

setup
